// Generated by CoffeeScript 1.10.0
(function() {
  (function() {
    var aghs, board, game, gameover, keyboard, powerup, rand3Ints, reset, snake, ticks, winner, world;
    if (!window.Aghs) {
      return console.error("something went wroooong");
    }
    aghs = window.Aghs();
    world = aghs.world;
    keyboard = aghs.keyboard;
    world.viewport(window.innerWidth - 20, window.innerHeight - 20);
    rand3Ints = function() {
      var i1, i2, i3, tally;
      tally = 350;
      i1 = ~~(Math.random() * 255);
      tally -= i1;
      i2 = ~~(Math.random() * tally);
      tally -= i2;
      i3 = tally;
      return [i1, i2, i3];
    };
    reset = function() {
      snake.position = {
        x: ~~(board.width / 2),
        y: ~~(board.height / 2)
      };
      snake.history = [];
      snake.length = 3;
      return powerup.reposition();
    };
    winner = false;
    ticks = {
      last: 0
    };
    board = {
      x: 0,
      y: 0,
      width: 50,
      height: 50,
      color: "#334",
      render: function(time, $) {
        return $.fillStyle(this.color).fillRect(this.x, this.y, this.width, this.height);
      }
    };
    powerup = {
      color: null,
      width: 1,
      height: 1,
      position: {
        x: 0,
        y: 0
      },
      recolor: function() {
        var c, colors;
        colors = [0, 255, 155];
        c = rand3Ints();
        return this.color = "rgb(" + c[0] + ", " + c[1] + ", " + c[2] + ")";
      },
      reposition: function() {
        this.recolor();
        this.position.x = ~~(Math.random() * board.width);
        return this.position.y = ~~(Math.random() * board.height);
      },
      render: function(time, $) {
        if (time.elapsed % 1000 < 500) {
          this.width = 0.8;
          this.height = 0.8;
          return $.fillStyle(this.color).fillRect(this.position.x + 0.1, this.position.y + 0.1, this.width, this.height);
        } else {
          this.width = 1;
          this.height = 1;
          return $.fillStyle(this.color).fillRect(this.position.x, this.position.y, this.width, this.height);
        }
      }
    };
    snake = {
      length: 3,
      history: [],
      hasChanged: true,
      color: "#fff",
      historyColor: "#d2d2d2",
      position: {
        x: ~~(board.width / 2),
        y: ~~(board.height / 2)
      },
      direction: "down",
      step: function(time) {
        var p, ref, ref1, result;
        if (!((board.width > (ref = this.position.x) && ref >= 0) && (board.height > (ref1 = this.position.y) && ref1 >= 0))) {
          aghs.state("endscreen");
        }
        if (this.hasChanged) {
          this.hasChanged = false;
          p = this.position;
          result = this.history.findIndex(function(h, i) {
            var r;
            r = h.position.x === p.x && h.position.y === p.y;
            return r;
          });
          if (result > 0) {
            aghs.state("endscreen");
          }
        }
        if (this.position.x === powerup.position.x && this.position.y === powerup.position.y) {
          this.length += 1;
          if (this.length >= (board.width * board.height)) {
            winner = true;
            aghs.state("endscreen");
          } else {
            powerup.reposition();
          }
        }
        if (keyboard.keys.up && snake.direction !== "down") {
          snake.direction = "up";
        }
        if (keyboard.keys.down && snake.direction !== "up") {
          snake.direction = "down";
        }
        if (keyboard.keys.left && snake.direction !== "right") {
          snake.direction = "left";
        }
        if (keyboard.keys.right && snake.direction !== "left") {
          snake.direction = "right";
        }
        if (time.elapsed - ticks.last > 100) {
          ticks.last = time.elapsed + 1;
          this.move();
          return this.hasChanged = true;
        }
      },
      render: function(time, $) {
        var metrics, size, that, x, y;
        that = this;
        $.fillStyle(this.color).fillRect(this.position.x, this.position.y, 1, 1);
        size = 1;
        $.font(size + "px 'Press Start 2P'");
        metrics = $.context.measureText("score: " + (this.length - 3));
        x = (board.width - metrics.width) / 2;
        y = board.height + (size * 2);
        $.fillStyle("#aaa").fillText("score: " + (this.length - 3), x, y);
        size = 1;
        $.font(size + "px 'Press Start 2P'");
        metrics = $.context.measureText("score: " + (this.length - 3));
        x = (board.width - metrics.width) / 2;
        y = board.height + (size * 4);
        $.fillStyle("#aaa").fillText("time: " + time.elapsed, x, y);
        this.history.forEach(function(history) {
          return $.fillStyle(that.historyColor).fillRect(history.position.x, history.position.y, 1, 1);
        });
      },
      move: function() {
        var x, y;
        x = this.position.x;
        y = this.position.y;
        this.history.unshift({
          position: {
            x: x,
            y: y
          },
          direction: this.direction
        });
        if (this.history.length > this.length) {
          this.history.length = this.length;
        }
        if (this.direction === "up") {
          this.position.y -= 1;
        }
        if (this.direction === "down") {
          this.position.y += 1;
        }
        if (this.direction === "left") {
          this.position.x -= 1;
        }
        if (this.direction === "right") {
          this.position.x += 1;
        }
      }
    };
    game = {
      name: "gameplay",
      enter: function(state) {
        aghs.renderer.scale(10, 10);
        return powerup.reposition();
      },
      step: function(time, $) {
        return snake.step(time, $);
      },
      render: function(time, $) {
        $.clear("#222");
        board.render(time, $);
        powerup.render(time, $);
        return snake.render(time, $);
      }
    };
    gameover = {
      name: "endscreen",
      fadeInValue: 1,
      lastUpdate: 0,
      enter: function(time) {
        aghs.renderer.scale(10, 10);
        return this.colorToggle = false;
      },
      step: function(time, $) {
        if (time.elapsed - ticks.last > 500) {
          ticks.last = time.elapsed + 1;
          this.colorToggle = !this.colorToggle;
        }
        this.text = winner ? "You Win!" : "Game Over";
        if (keyboard.keys.space) {
          reset();
          return aghs.state("gameplay");
        }
      },
      render: function(time, $) {
        var metrics, size, x, y;
        $.clear("#222");
        board.render(time, $);
        powerup.render(time, $);
        snake.render(time, $);
        size = 3;
        $.font(size + "px 'Press Start 2P'");
        metrics = $.context.measureText(this.text);
        x = (board.width - metrics.width) / 2;
        y = (board.height + size) / 2;
        $.fillStyle(this.colorToggle ? "#fff" : "#aac").fillText(this.text, x, y);
        $.font(1. + "px 'Press Start 2P'");
        metrics = $.context.measureText("Press SPACE BAR to play again");
        x = (board.width - metrics.width) / 2;
        y = (board.height + 1) / 2;
        return $.fillStyle("#eee").fillText("Press SPACE BAR to play again", x, y + size);
      }
    };
    aghs.state(game);
    aghs.state(gameover);
    return aghs.start();
  })();

}).call(this);
